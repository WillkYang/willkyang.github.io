<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WillkYang</title>
  
  <subtitle>Hi there, I am a developer 👋</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-08T10:58:21.067Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>WillkYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【区块链技术与应用】学习笔记 - 以太坊</title>
    <link href="http://yoursite.com/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E4%BB%A5%E5%A4%AA%E5%9D%8A.html"/>
    <id>http://yoursite.com/posts/区块链技术与应用-以太坊.html</id>
    <published>2019-06-11T16:00:00.000Z</published>
    <updated>2020-09-08T10:58:21.067Z</updated>
    
    <content type="html"><![CDATA[<p>幕布观看：<a href="https://mubu.com/doc/38YFZMXhKR_#m" target="_blank" rel="noopener">https://mubu.com/doc/38YFZMXhKR_#m</a></p><!-- excerpt --><hr><ul><li><p>decentralized contract</p><ul><li><p>account base ledged</p><ul><li><p>externally owned account 外部账户</p><ul><li><p>balance</p></li><li><p>nonce</p></li></ul></li><li><p>smart contract account 合约账户</p><ul><li><p>code</p></li><li><p>storage</p></li></ul></li></ul></li><li><p>数据结构</p><ul><li><p>状态树</p><ul><li><p>modified MPT</p><ul><li>Merkle Patricia tree 经过路径压缩的前缀树</li></ul></li><li><p>保留所有状态的目的：支持回滚</p></li><li><p>区块里需要包含整一棵状态树，不能只包含与区块交易相关的账户状态，否则在遇到一个新账户，每次就都得查到创世区块去</p></li></ul></li><li><p>交易树</p></li><li><p>收据树</p><ul><li>bloom filter</li></ul></li><li><p>序列化方式：RLP（Recursive Length Prefix ）</p></li></ul></li><li><p>GHOST协议</p><ul><li><p>当前出块奖励 3 ETH，以前 5 ETH</p></li><li><p>每包含一个可以多得 1/32 的奖励，最多包含 2 个叔父区块</p></li><li><p>最多包含 2 个 7 代以内的叔父区块，不同代奖励依次递减来鼓励及时合并：7/8，6/8，5/8，4/8，3/8，2/8</p></li></ul></li><li><p>挖矿算法</p><ul><li><p>Litecoin：scryipt：memory-hard 不利于轻节点</p></li><li><p>以太坊：16M cache、1G dataset：DAG</p></li><li><p>ethash算法</p></li></ul></li><li><p>难度调整</p><ul><li><p>难度炸弹</p></li><li><p>EIP：Ethereum Improvement Proposal</p></li><li><p>BIP：Bitcoin Improvement Proposal</p></li></ul></li><li><p>权益证明</p><ul><li>Casper the Friendly Finality Gadget（FFG）</li></ul></li><li><p>智能合约</p><ul><li><p>先扣除Gas Limit后，执行合约，结束后多了就退。</p></li><li><p>先执行合约后挖矿，因为挖矿需要先构造三棵树。</p></li><li><p>所有全节点接收到新的区块之后，都需要执行一遍，才能构造更新本地的三棵树，因为传过来的block是没有这几棵树的，只有树根节点的hash。</p></li><li><p>智能合约不支持多线程，因为要求每次执行必须是一样的。</p></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;幕布观看：&lt;a href=&quot;https://mubu.com/doc/38YFZMXhKR_#m&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mubu.com/doc/38YFZMXhKR_#m&lt;/a&gt;&lt;/p&gt;
&lt;!-- excerpt 
      
    
    </summary>
    
    
      <category term="BlockChain" scheme="http://yoursite.com/all-tags/BlockChain/"/>
    
  </entry>
  
  <entry>
    <title>【区块链技术与应用】学习笔记 - 比特币</title>
    <link href="http://yoursite.com/posts/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8-%E6%AF%94%E7%89%B9%E5%B8%81.html"/>
    <id>http://yoursite.com/posts/区块链技术与应用-比特币.html</id>
    <published>2019-05-31T16:00:00.000Z</published>
    <updated>2020-09-08T10:58:26.908Z</updated>
    
    <content type="html"><![CDATA[<p>幕布观看：<a href="https://mubu.com/doc/4EKoyyY1V5_#m" target="_blank" rel="noopener">https://mubu.com/doc/4EKoyyY1V5_#m</a></p><!-- excerpt --><hr><ul><li><p>decentralized currency</p><ul><li><p>密码学部分</p><ul><li><p>原理</p><ul><li><p>collision resistance （防止碰撞）</p></li><li><p>hiding （无法反向推导）</p></li><li><p>puzzle friendly (挖矿过程没有捷径)</p></li></ul></li><li><p>哈希：SHA - 256</p></li><li><p>签名：私钥签名、公钥验证</p></li></ul></li><li><p>数据结构</p><ul><li><p>哈希指针H()</p><ul><li>tamper-evident log (防止篡改)</li></ul></li><li><p>Merkle tree</p><ul><li><p>使用哈希指针代替了普通指针</p></li><li><p>提供merkle proof</p><ul><li><p>proof of membership</p></li><li><p>proof of no-membership</p><ul><li>需要sorted Merkle tree，但是比特币没有采用这种tree，因为他没有这种需求</li></ul></li></ul></li></ul></li></ul></li><li><p>共识机制</p><ul><li><p>distributed consensus</p><ul><li><p>CAP Theorem：3个只能同时满足两个</p><ul><li><p>Consistency</p></li><li><p>Availablity</p></li><li><p>Partition tolerance</p></li></ul></li></ul></li><li><p>直接投票可能导致sybil attach(油攻击，生成大量的无意义账户进行投票)</p></li><li><p>使用transaction-based ledger (交易记录账本)</p></li></ul></li><li><p>系统实现</p><ul><li>UTXO：Unspent Transaction Output</li></ul></li><li><p>网络</p><ul><li><p>simple, robust, but no <a href="">efficienthttps://www.solidot.org/story?sid=65371</a></p></li><li><p>application layer: Bitcoin Block chain</p></li><li><p>network layer: P2P Overlay Network</p></li></ul></li><li><p>挖矿难度调整</p><ul><li><p>每隔大概2周调整一次挖矿难度（2016 <em> 10）/ (60 </em> 24)约等于14天</p></li><li><p>target = target <em> (actual time / expected time), expected time = 2016 </em> 10</p></li><li><p>每次target调整最多不超过4倍，防止难度爆炸</p></li></ul></li><li><p>挖矿</p><ul><li><p>全节点</p><ul><li><p>一直在线</p></li><li><p>在本地硬盘上维护完整的区块链信息</p></li><li><p>在内存里维护UTXO集合，以便快速检验交易的正确性</p></li><li><p>监听比特币网络上的交易信息，验证每个交易的合法性</p></li><li><p>决定哪些交易会被打包到区块里</p></li><li><p>监听别的矿工挖出来的区块，验证其合法性</p></li><li><p>挖矿</p><ul><li><p>决定沿着哪条链挖下去？</p></li><li><p>当出现等长的分叉的时候，选择哪一个分支？</p></li></ul></li></ul></li><li><p>轻节点</p><ul><li><p>不是一直在线</p></li><li><p>不用保存整个区块链，只要保存每个区块的块头</p></li><li><p>不用保存全部交易，只保存与自己相关的交易</p></li><li><p>无法检验大多数交易的合法性，只能检验与自己相关的那些交易的合法性</p></li><li><p>无法检测网上发布的区块的正确性</p></li><li><p>可以验证挖矿的难度</p></li><li><p>只能检测哪个是最长链，不知道哪个是最长合法链</p></li></ul></li><li><p>演变：通用到专用</p><ul><li><p>CPU</p></li><li><p>GPU</p></li><li><p>ASIC： Application Specific Integrated Circuit</p></li></ul></li><li><p>矿池</p><ul><li><p>矿主和很多个矿工，矿工除了挖矿，还需要进行工作量证明，almost valid block，即降低难度阈值的挖矿 （<strong><em>这个理解难一点</em></strong>），其实不会影响矿工的真实挖矿，因为都是在计算hash，只是计算结果有不同的用处。</p></li><li><p>如果矿池拥有51%算力</p><ul><li><p>概率上可以执行分叉攻击</p></li><li><p>Boycott（发动拒绝打包某些交易的攻击）</p></li></ul></li></ul></li></ul></li><li><p>交易脚本</p><ul><li><p>P2PK：Pay to Public Key</p><ul><li><p>INPUT：PUSHDATA（Sig）</p></li><li><p>OUTPUT：PUSHDATA（PubKey）、CHECKSIG</p></li></ul></li><li><p>P2PKH：Pay to Public Key Hash - 最常用</p><ul><li><p>INPUT：PUSHDATA（Sig）、PUSHDATA（PubKey）</p></li><li><p>OUTPUT：DUP（功能：把栈顶的元素复制一遍）、HASH160、PUSHDATA（PubKeyHash）、EQUALVERIFY、CHECKSIG</p></li></ul></li><li><p>P2SH：Pay to Script Hash，采用BIP16的方案。目前多重签名主要都采用这种方式</p><ul><li><p>INPUT：。。。PUSHDATA（Sig）。。。PUSHDATA（serialized redeemScript）</p></li><li><p>OUTPUT：HASH160、PUSHDATA（redeemScriptHash）、EQUAL</p></li><li><p>使用P2SH实现P2PK</p><ul><li><p>redeemScript：PUSHDATA（PubKey）、CHECKSIG</p></li><li><p>INPUT：PUSHDATA（Sig）、PUSHDATA（serialized redeemScript）</p></li><li><p>OUTPUT：HASH160、PUSHDATA（redeemScriptHash）、EQUAL</p></li><li><p>过程：先依次执行输入输出脚本、验证通过后，节点反序列化出redeem script继续执行</p></li></ul></li><li><p>主要目的是为了解决多重签名的问题，早期的多重签名方案需要用户在输出脚本里包含多重签名的内容，转账不友好。使用P2SH后，用户则可以无需关注收款人使用的签名方式。</p></li></ul></li><li><p>Proof of Burn，销毁</p><ul><li>OUTPUT：RETURN</li></ul></li></ul></li><li><p>分叉fork</p><ul><li><p>state fork</p><ul><li><p>forking attack</p></li><li><p>deliberate fork</p></li></ul></li><li><p>protocal fork</p><ul><li><p>hard fork</p><ul><li>例子：block size limit ：1M -&gt; 4M</li></ul></li><li><p>soft fork</p><ul><li><p>block size limit ：1M -&gt; 0.5M</p></li><li><p>给目前没有规定的field赋予新的规则</p></li><li><p>P2SH</p></li></ul></li></ul></li></ul></li><li><p>匿名和隐私保护</p><ul><li><p>coin mixing</p></li><li><p>zero-acknowledge proof 零知识证明</p><ul><li>同态隐藏</li></ul></li><li><p>盲签方法</p></li><li><p>零币和零钞</p></li></ul></li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;幕布观看：&lt;a href=&quot;https://mubu.com/doc/4EKoyyY1V5_#m&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mubu.com/doc/4EKoyyY1V5_#m&lt;/a&gt;&lt;/p&gt;
&lt;!-- excerpt 
      
    
    </summary>
    
    
      <category term="BlockChain" scheme="http://yoursite.com/all-tags/BlockChain/"/>
    
  </entry>
  
  <entry>
    <title>MySQL介绍和实践总结</title>
    <link href="http://yoursite.com/posts/MySQL%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93.html"/>
    <id>http://yoursite.com/posts/MySQL介绍和实践总结.html</id>
    <published>2017-09-11T02:06:18.000Z</published>
    <updated>2020-10-21T08:45:31.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文首先介绍MySQL的安装和基本使用、进阶操作、讲解MySQL的导入导出和自动备份，然后介绍安全模式修改密码和MySQL的全文本搜索功能，最后记录了个人使用MySQL中遇到的问题集。</p></blockquote><p><img src="http://ou0bp2mrg.bkt.clouddn.com/2017-09-11-15050957075550.jpg" alt=""></p><h3 id="开始安装："><a href="#开始安装：" class="headerlink" title="开始安装："></a>开始安装：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-common mysql-server</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>建库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS yourdbname DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><p>建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table MyClass(id int(4) not null primary key auto_increment,name char(20) not null,sex int(4) not null default &apos;0&apos;,degree double(16,2));</span><br></pre></td></tr></table></figure><p>增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into MyClass values(1,&apos;Tom&apos;,96.45),(2,&apos;Joan&apos;,82.99), (2,&apos;Wang&apos;, 96.59);</span><br></pre></td></tr></table></figure><p>删</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from MyClass where id=1;</span><br></pre></td></tr></table></figure><p>改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update MyClass set name=&apos;Mary&apos; where id=1;</span><br></pre></td></tr></table></figure><p>查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from MyClass;</span><br></pre></td></tr></table></figure><p>显示所有的view</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from information_schema.TABLES where table_type=&apos;view&apos; AND table_schema = &apos;数据库名&apos;;</span><br></pre></td></tr></table></figure><h3 id="进一步操作"><a href="#进一步操作" class="headerlink" title="进一步操作"></a>进一步操作</h3><p>创建用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user xxx identified by ‘password’;</span><br></pre></td></tr></table></figure><p>重命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename user aaa to bbb；</span><br></pre></td></tr></table></figure><p>删除用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user aaa;</span><br></pre></td></tr></table></figure><p>显示权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show grants for aaa(用户);</span><br></pre></td></tr></table></figure><p>授予权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select on xxx(数据库).* to aaa(用户);</span><br></pre></td></tr></table></figure><p>授予某个数据库的全部权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant all on  xxx(数据库).* to aaa(用户);</span><br><span class="line">grant all on  xxx(数据库).* to aaa(用户)@localhost;</span><br></pre></td></tr></table></figure><p>取消授权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke all on *.* from aaa(用户)@localhost;</span><br></pre></td></tr></table></figure><p>修改权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%’   WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>以上操作完成之后记得刷新权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h3><p>导出数据和表结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p abc(数据库名) &gt; abc.sql</span><br><span class="line">敲回车后输入密码</span><br></pre></td></tr></table></figure><p>只导出表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -d abc &gt; abc.sql</span><br></pre></td></tr></table></figure><p>导入数据库<br>1、首先建空数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database abc;</span><br></pre></td></tr></table></figure><p>2、导入数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p abc(数据库名) &lt; abc.sql</span><br></pre></td></tr></table></figure><h3 id="数据库自动备份"><a href="#数据库自动备份" class="headerlink" title="数据库自动备份"></a>数据库自动备份</h3><p>新建备份脚本xxx.sh,输入以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 要备份的数据库名，多个数据库用空格分开</span><br><span class="line">databases=(&quot;db1&quot;, &quot;db2&quot;) </span><br><span class="line"></span><br><span class="line"># 备份文件要保存的目录，注意当前用户必须用户保存目录的读写权限</span><br><span class="line">basepath=&apos;/root/backup/mysql/&apos;</span><br><span class="line"></span><br><span class="line">if [ ! -d &quot;$basepath&quot; ]; then</span><br><span class="line">  mkdir -p &quot;$basepath&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 循环databases数组</span><br><span class="line">for db in $&#123;databases[*]&#125;</span><br><span class="line">  do</span><br><span class="line">    # 备份数据库生成SQL文件</span><br><span class="line">    nice -n 19 /usr/bin/mysqldump -uroot -pcd32d5e86e --database $db &gt; $basepath$db-$(date +%Y%m%d).sql</span><br><span class="line">    </span><br><span class="line">    # 将生成的SQL文件压缩</span><br><span class="line">    nice -n 19 tar zPcf $basepath$db-$(date +%Y%m%d).sql.tar.gz -C $basepath $db-$(date +%Y%m%d).sql</span><br><span class="line">    </span><br><span class="line">    # 删除7天之前的备份数据</span><br><span class="line">    find $basepath -mtime +7 -name &quot;*.sql.tar.gz&quot; -exec rm -rf &#123;&#125; \;</span><br><span class="line">  done</span><br><span class="line"></span><br><span class="line">  # 删除生成的SQL文件</span><br><span class="line">  rm -rf $basepath/*.sql</span><br></pre></td></tr></table></figure><p>使用crontab设置定时任务，在终端输入crontab -e，加入以下内容，此任务为每天3点自动执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 3 * * * bash xxx.sh(此处填写脚本绝对地址)</span><br></pre></td></tr></table></figure><h3 id="开启日志记录"><a href="#开启日志记录" class="headerlink" title="开启日志记录"></a>开启日志记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id = 1</span><br><span class="line">log_bin = /var/log/mysql/mysql-bin.log</span><br><span class="line">max_binlog_size = 1000M</span><br><span class="line">binlog-format = row</span><br></pre></td></tr></table></figure><h3 id="安全模式操作"><a href="#安全模式操作" class="headerlink" title="安全模式操作"></a>安全模式操作</h3><p>进入安全模式修改密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe --skip-grant-tables &amp;</span><br><span class="line"></span><br><span class="line">select user,host,password from user where user=&quot;root&quot;</span><br></pre></td></tr></table></figure><p>不同版本的mysql修改用户密码方式不一样,需要查看mysql-&gt;user中的密码字段，如果不是password的话就是authentication_string。</p><p>authentication_string的修改方式不太一样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set authentication_string=PASSWORD(&quot;&quot;) where User=&apos;root&apos;;</span><br><span class="line">update user set plugin=&quot;mysql_native_password&quot;;</span><br><span class="line">flush privileges;</span><br><span class="line">quit;</span><br><span class="line">sudo /etc/init.d/mysql stop</span><br><span class="line">sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure><p>如果不是authentication_string，则可用以下方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set password=PASSWORD(&quot;your_password&quot;) where user=&quot;root&quot; and host=“localhost&quot;</span><br></pre></td></tr></table></figure><h3 id="新操作"><a href="#新操作" class="headerlink" title="新操作"></a>新操作</h3><p>Mysql全文本搜索</p><blockquote><p>Mysql5.6之后支持InnoDB，中文的全文本搜索，内置使用n-gram为分词处理器，还支持中文～。</p></blockquote><p>创建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create fulltext index ngram_idx on tag(Title) with parser ngram;</span><br><span class="line">或</span><br><span class="line">alter table tag add fulltext index ngram_idx(Title) with parser ngram;</span><br></pre></td></tr></table></figure><p>获取支持的最小分词长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;ft_min_word_len&apos;;</span><br><span class="line">//unix系统可在/etc/my.cnf中修改</span><br><span class="line">[mysqld]</span><br><span class="line">ft_min_word_len = 1</span><br></pre></td></tr></table></figure><p>开始使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Title,match(Title) against(&apos;清水&apos;) from tag ;</span><br></pre></td></tr></table></figure><h3 id="可能出现的问题集："><a href="#可能出现的问题集：" class="headerlink" title="可能出现的问题集："></a>可能出现的问题集：</h3><ul><li>描述</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-05-04T01:21:32.004560Z mysqld_safe Logging to &apos;/var/log/mysql/error.log&apos;.</span><br><span class="line">2017-05-04T01:21:32.023009Z mysqld_safe A mysqld process already exists</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo killall mysqld</span><br></pre></td></tr></table></figure><ul><li>描述</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2017-05-04T01:22:26.486677Z mysqld_safe Logging to &apos;/var/log/mysql/error.log&apos;.</span><br><span class="line">2017-05-04T01:22:26.488204Z mysqld_safe Directory &apos;/var/run/mysqld&apos; for UNIX socket file don&apos;t exists.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/run/mysqld</span><br><span class="line">sudo chown -R mysql:mysql /var/run/mysqld</span><br></pre></td></tr></table></figure><ul><li>描述</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/mysql start</span><br><span class="line">ies: No such file or directory</span><br><span class="line">job-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">[....] Starting mysql (via systemctl): mysql.servicejob-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">Job for mysql.service failed because the control process exited with error code. See &quot;systemctl status mysql.service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前文件夹不是实际目录导致</span><br><span class="line">cd到一个实际目录位置即可</span><br></pre></td></tr></table></figure><ul><li>描述</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/mysql start</span><br><span class="line">shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">job-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">job-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">job-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">job-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">job-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">job-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">job-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">[....] Starting mysql (via systemctl): mysql.servicejob-working-directory: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory</span><br><span class="line">Job for mysql.service failed because the control process exited with error code. See &quot;systemctl status mysql.service&quot; and &quot;journalctl -xe&quot; for details.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">按照提示:See &quot;systemctl status mysql.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">但是并么有什么卵用，直接看mysql的log：/var/log/mysql/error.log</span><br><span class="line">2017-05-04T01:37:56.583745Z 0 [Note] InnoDB: Check that you do not already have another mysqld process using the same InnoDB data or log files.</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">杀掉所有mysqld进程：killall mysqld </span><br><span class="line">再次sudo /etc/init.d/mysql start 成功</span><br></pre></td></tr></table></figure><ul><li>描述</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg被锁定</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文首先介绍MySQL的安装和基本使用、进阶操作、讲解MySQL的导入导出和自动备份，然后介绍安全模式修改密码和MySQL的全文本搜索功能，最后记录了个人使用MySQL中遇到的问题集。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/all-tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux源码安装Nginx实现负载均衡</title>
    <link href="http://yoursite.com/posts/Linux%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85Nginx%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.html"/>
    <id>http://yoursite.com/posts/Linux源码安装Nginx实现负载均衡.html</id>
    <published>2017-05-04T16:00:00.000Z</published>
    <updated>2020-10-21T08:46:20.783Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何在Linux上安装nginx并实现在多台主机上的服务负载均衡。</p><!-- excerpt --><blockquote><p>环境：Ubuntu16.04 amd64</p></blockquote><p><img src="../assets/Linux源码安装nginx实现负载均衡/1240-20201011152858943.png" alt="nginx实现负载均衡"></p><h4 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h4><p>1.下载解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.12.0.tar.gz</span><br><span class="line">tar zxvf nginx-1.12.0.tar.gz</span><br></pre></td></tr></table></figure><p>2.配置安装路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.12.0</span><br><span class="line">./configure --prefix=/opt/nginx // 此步骤报错可能是没有相应的C编译器等，需要先安装依赖包，如果成功，则跳过步骤3</span><br><span class="line">//如果需要ssl使用</span><br><span class="line">./configure --with-http_stub_status_module --with-http_ssl_module  --with-http_realip_module</span><br><span class="line">// 如果需要rtmp，使用</span><br><span class="line">./configure --add-module=/root/nginx-rtmp-module</span><br></pre></td></tr></table></figure><p>3.安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line">sudo apt-get install gcc  zlib1g-dev</span><br><span class="line">可选：sudo apt-get install openssl libssl-dev</span><br></pre></td></tr></table></figure><p>如果报错<code>E: Unable to locate package pcre-devel</code>可能源问题，可以更换为其他源，这里选择阿里源<br>在<code>/etc/apt/sources.list</code>中替换为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse  </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse  </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse  </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse  </span><br><span class="line">##测试版源  </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse  </span><br><span class="line"># 源码  </span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse  </span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse  </span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse  </span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse  </span><br><span class="line">##测试版源  </span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse  </span><br><span class="line"># Canonical 合作伙伴和附加  </span><br><span class="line">deb http://archive.canonical.com/ubuntu/ xenial partner  </span><br><span class="line">deb http://extras.ubuntu.com/ubuntu/ xenial main</span><br></pre></td></tr></table></figure><p>完成后重新执行步骤2的命令</p><p>4.编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">// 没有的话，先安装sudo apt-get install make</span><br></pre></td></tr></table></figure><p>5.完成安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>最后在nginx配置文件中实现负载均衡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"># 负载均衡</span><br><span class="line">    upstream nginxBalance &#123;</span><br><span class="line">#  将同一会话定向到同一个服务器</span><br><span class="line">        ip_hash;</span><br><span class="line">        server 10.211.55.9:9090;</span><br><span class="line">        server 10.211.55.10:9090;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://nginxBalance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关连接<br><a href="https://segmentfault.com/a/1190000006755963" target="_blank" rel="noopener">Linux下Nginx的安装、升级及动态添加模块</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍了如何在Linux上安装nginx并实现在多台主机上的服务负载均衡。&lt;/p&gt;
&lt;!-- excerpt --&gt;
&lt;blockquote&gt;
&lt;p&gt;环境：Ubuntu16.04 amd64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;../assets
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/all-tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux下Wkhtmltopdf的安装和使用</title>
    <link href="http://yoursite.com/posts/Linux%E4%B8%8BWkhtmltopdf%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html"/>
    <id>http://yoursite.com/posts/Linux下Wkhtmltopdf的安装和使用.html</id>
    <published>2017-02-22T16:00:00.000Z</published>
    <updated>2020-10-11T07:27:57.184Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Wiki：wkhtmltopdf are open source (LGPLv3) command line tools to render HTML into PDF and various image formats using the Qt WebKit rendering engine. These run entirely “headless” and do not require a display or display service.</p></blockquote><p><img src="../assets/Linux下Wkhtmltopdf的安装和使用/banner.jpg" alt="banner" style="zoom: 67%;"></p><ul><li>直接使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install wkhtmltopdf</span><br></pre></td></tr></table></figure><ul><li>使用：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wkhtmltopdf src dst</span><br></pre></td></tr></table></figure><ul><li>如果使用出现：<em>wkhtmltopdf: cannot connect to X server</em>，是因为install的版本比较旧。不过官网最新的版本已无需x-server支持。你可以使用下面的处理方法：</li></ul><p>1.下载官网预编译版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.gna.org/wkhtmltopdf/0.12/0.12.3/wkhtmltox-0.12.3_linux-generic-amd64.tar.xz</span><br></pre></td></tr></table></figure><p>2.解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvfJ wkhtmltox-0.12.3_linux-generic-amd64.tar.xz</span><br></pre></td></tr></table></figure><p>3.使用其中的可执行文件替换旧版本文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv ./wkhtmltox/bin/wkhtmltopdf /usr/bin/wkhtmltopdf</span><br></pre></td></tr></table></figure><p>4.赋予执行权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x /usr/bin/wkhtmltopdf</span><br></pre></td></tr></table></figure><p><strong>其它:</strong></p><p>如果生成的pdf的字符都是方块，则需要安装standard PostScript fonts：</p><ul><li>Centos：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install urw-fonts libXext openssl-devel</span><br></pre></td></tr></table></figure><ul><li>Ubuntu：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">拷贝中文字体到/usr/share/fonts/msfonts/下，文件名不能为中文，执行完之后：fc-list看一下有没有导入字体。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Wiki：wkhtmltopdf are open source (LGPLv3) command line tools to render HTML into PDF and various image formats using the Qt 
      
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/all-tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>免越狱tweak应用逆向开发</title>
    <link href="http://yoursite.com/posts/%E5%85%8D%E8%B6%8A%E7%8B%B1tweak%E5%BA%94%E7%94%A8%E9%80%86%E5%90%91%E5%BC%80%E5%8F%91.html"/>
    <id>http://yoursite.com/posts/免越狱tweak应用逆向开发.html</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2020-10-11T07:24:11.872Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了如何在iOS上使用tweak工具对应用进行hook，注入并重新打包应用的过程。</p><!-- excerpt --><blockquote><p>对于已越狱的设备，系统默认安装了mobilesubstrate动态库，提供一个系统级的入侵管道，所有的tweak都可以依赖它来进行开发。而对于没有越狱的手机，我们需要向目标app注入libsubstrate.dylib动态库，才能使程序在运行时加载我们编写的动态库。</p></blockquote><h5 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h5><ul><li><a href="https://github.om/DanTheMan827/ios-app-- signer.git" target="_blank" rel="noopener">ios-app-signer：应用签名打包工具(可选)</a></li><li><a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="noopener">class-dump：头文件导出工具</a></li><li><p><a href="http://github.com/DHowett/theos" target="_blank" rel="noopener">theos</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo clone git://github.com/DHowett/theos.git /opt/theos</span><br></pre></td></tr></table></figure></li><li><p><a href="https://pan.baidu.com/s/1o8PPVGu" target="_blank" rel="noopener">libsubstrate.dylib</a>下载到/opt/theos/lib/</p></li><li><p><a href="http://joedj.net/ldid" target="_blank" rel="noopener">ldid签名工具</a>下载到/opt/theos/bin/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /opt/theos/bin/ldid</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/DHowett/dm.pl" target="_blank" rel="noopener">配置dpkg-deb</a>下载dm.pl，重命名为dpkg-deb后，放到/opt/theos/bin/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /opt/theos/bin/dpkg-deb</span><br></pre></td></tr></table></figure></li><li><p><a href="https://github.com/alexzielenski/optool" target="_blank" rel="noopener">optool：依赖注入工具</a></p></li></ul><p>编译安装 optool 工具，下载之后需要修改项目Build Setting中Base SDK项为当前系统sdk，否则可能编译报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 因为 optool 添加了 submodule，因为需要使用 --recuresive 选项，将子模块全部 clone 下来</span><br><span class="line">git clone --recursive https://github.com/alexzielenski/optool.git</span><br><span class="line">cd optool</span><br><span class="line">xcodebuild -project optool.xcodeproj -configuration Release ARCHS=&quot;x86_64&quot; build</span><br><span class="line">#编译完成后建议将生成二进制文件放到/usr/local/bin目录下</span><br></pre></td></tr></table></figure><hr><h5 id="实现部分："><a href="#实现部分：" class="headerlink" title="实现部分："></a>实现部分：</h5><h6 id="1-在tweak工程目录下编译代码，生成目标库："><a href="#1-在tweak工程目录下编译代码，生成目标库：" class="headerlink" title="1. 在tweak工程目录下编译代码，生成目标库："></a>1. 在tweak工程目录下编译代码，生成目标库：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>可以在<em>./.theos/obj/debug</em>下找到生成的目标库<em>xxx.dylib</em></p><h6 id="2-修改目标库依赖文件的相对地址："><a href="#2-修改目标库依赖文件的相对地址：" class="headerlink" title="2.修改目标库依赖文件的相对地址："></a>2.修改目标库依赖文件的相对地址：</h6><pre><code>otool -L xxx.dylib</code></pre><p><img src="../assets/免越狱tweak应用逆向开发/1240-20201011152403509.png" alt="修改前依赖库"><br>查看动态库的依赖库，图中可以看到两个架构的依赖库，其中大部分都是系统库，只有一个需要我们注入的库。由于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate</span><br></pre></td></tr></table></figure><p>在实际设备上没有对应的文件，我们需要修改其地址为相对地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install_name_tool -change /Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate @loader_path/libsubstrate.dylib xxx.dylib</span><br></pre></td></tr></table></figure><p>如果系统显示的是<em>/usr/lib/libsubstrate.dylib</em>而不是<em>/Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate</em>的话，使用以下命令：(命令中只有依赖地址不同，@loader_path指明相对地址。)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install_name_tool -change/usr/lib/libsubstrate.dylib @loader_path/libsubstrate.dylib xxx.dylib</span><br></pre></td></tr></table></figure><p>完成之后我们再次查看依赖库：</p><p><img src="../assets/免越狱tweak应用逆向开发/1240-20201011152409754.png" alt="修改后依赖库"><br>可以看到，依赖库加载地址已经成功被修改</p><h6 id="3-注入xxx-dylib到目标应用中"><a href="#3-注入xxx-dylib到目标应用中" class="headerlink" title="3.注入xxx.dylib到目标应用中"></a>3.注入xxx.dylib到目标应用中</h6><p>拷贝<a href="https://pan.baidu.com/s/1o8PPVGu" target="_blank" rel="noopener">libsubstrate.dylib</a>和我们编写的库xxx.dylib到需要hook的应用的zzz.app目录下，修改应用目录下二进制文件的zzz的Load Commands段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">optool install -c load -p &quot;@executable_path/xxx.dylib&quot; -t ./zzz</span><br><span class="line">#注：zzz为二进制文件名</span><br></pre></td></tr></table></figure><h6 id="4-重签名和打包应用："><a href="#4-重签名和打包应用：" class="headerlink" title="4.重签名和打包应用："></a>4.重签名和打包应用：</h6><pre><code>codesign -f -s ‘iPhone Developer: xxx(xxx)’ —entitlements xxx.entitlements zzz.app</code></pre><p>此处也可以简单的使用工具一步完成<a href="https://github.com/DanTheMan827/ios-app-signer.git" target="_blank" rel="noopener">ios-app-signer</a>生成ipa</p><p><img src="../assets/免越狱tweak应用逆向开发/1240-20201011152410529.png" alt="ios-app-signer应用截图"></p><h6 id="5-使用itunes或pp助手或itool等方法安装食用～"><a href="#5-使用itunes或pp助手或itool等方法安装食用～" class="headerlink" title="5.使用itunes或pp助手或itool等方法安装食用～"></a>5.使用itunes或pp助手或itool等方法安装食用～</h6><hr><h5 id="知识扩展链："><a href="#知识扩展链：" class="headerlink" title="知识扩展链："></a>知识扩展链：</h5><blockquote><p><a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653577384&amp;idx=1&amp;sn=b44a9c9651bf09c5bea7e0337031c53c&amp;scene=0#wechat_redirect" target="_blank" rel="noopener">移动App入侵与逆向破解技术－iOS篇</a><br><a href="http://www.swiftyper.com/2016/12/26/wechat-redenvelop-tweak-for-non-jailbroken-iphone/" target="_blank" rel="noopener">免越狱版 iOS 抢红包插件</a><br><a href="http://www.swiftyper.com/2016/01/25/ios-tweak-install-guide/" target="_blank" rel="noopener">iOS微信抢红包Tweak安装教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文记录了如何在iOS上使用tweak工具对应用进行hook，注入并重新打包应用的过程。&lt;/p&gt;
&lt;!-- excerpt --&gt;
&lt;blockquote&gt;
&lt;p&gt;对于已越狱的设备，系统默认安装了mobilesubstrate动态库，提供一个系统级的入侵管道，所有的twea
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/all-tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>基于Xcode8插件开发～一键检测处理头文件引用</title>
    <link href="http://yoursite.com/posts/%E5%9F%BA%E4%BA%8EXcode8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%EF%BD%9E%E4%B8%80%E9%94%AE%E6%A3%80%E6%B5%8B%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6%E5%BC%95%E7%94%A8.html"/>
    <id>http://yoursite.com/posts/基于Xcode8插件开发～一键检测处理头文件引用.html</id>
    <published>2017-01-16T16:00:00.000Z</published>
    <updated>2020-10-11T07:23:42.241Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于Xcode8开放的Xcode Source Editor Extension，实现了一个自动删除源码中重复头文件的小插件。</p><!-- excerpt --><blockquote><p>Xcode8开放了新的一个Extension：Xcode Source Editor Extension，目的是让开发者可以正规的自主为IDE编写插件，虽然说系统现提供的功能还比较拮据，但是不妨碍我们了解和使用，本文主要介绍Xcode Source Editor Extension的功能，并演示一个简单的插件的实现～</p></blockquote><h6 id="一、实现功能"><a href="#一、实现功能" class="headerlink" title="一、实现功能"></a>一、实现功能</h6><p>1.删除无用的类头文件，要求类名和文件名一致<br>2.删除重复导入的头文件，只保留一个</p><h6 id="二、编写代码"><a href="#二、编写代码" class="headerlink" title="二、编写代码"></a>二、编写代码</h6><p>1.新建项目，然后新建一个Target，类型选择Xcode Source Editor Extension，完成之后设置target的签名和项目的签名一致。<br><img src="../assets/基于Xcode8插件开发～一键检测处理头文件引用/1240-20201011152242032.png" alt="在New中选择Target"></p><p>2.在info.plist中可以修改插件显示名称Bundle name和其它对Extension的设置。</p><p><img src="../assets/基于Xcode8插件开发～一键检测处理头文件引用/1240-20201011152244818.png" alt="插件的info.plist"></p><p>3.系统默认为我们生成SourceEditorCommand文件，此处我们也可以在info里边修改配置项，类似于项目中系统生成的Main.storyboard。插件的重点基本在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)performCommandWithInvocation:(XCSourceEditorCommandInvocation *)invocation completionHandler:(void (^)(NSError * _Nullable nilOrError))completionHandler</span><br></pre></td></tr></table></figure><p>用户调用我们的插件时，系统会回调这个方法，</p><p>######XCSourceEditorCommandInvocation</p><blockquote><p>Information about the source editor command that the user invoked, such as the identifier of the command, the text buffer on which the command is to operate, and whether the command has been canceled by Xcode or the user.</p></blockquote><p>其中invocation.buffer是编辑器的全部文本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/** 当前编辑器的全部文件内容 */</span><br><span class="line">@property (readonly, strong) NSMutableArray &lt;NSString *&gt; *lines;</span><br><span class="line">/** 是当前选中的文本 */</span><br><span class="line">@property (readonly, strong) NSMutableArray &lt;XCSourceTextRange *&gt; *selections;</span><br></pre></td></tr></table></figure><p>我们在回调方法中编写如下代码：</p><p><img src="../assets/基于Xcode8插件开发～一键检测处理头文件引用/1240-20201011152252215.png" alt="源码图片一份，方便查看"></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//headerDict存放文本中所有的头文件</span></span><br><span class="line"><span class="built_in">NSMutableDictionary</span> &lt;<span class="built_in">NSString</span>*, <span class="built_in">NSNumber</span> *&gt;*headerDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line"><span class="comment">//willCheckDict存放将要删除的头文件</span></span><br><span class="line"><span class="built_in">NSMutableDictionary</span> &lt;<span class="built_in">NSNumber</span>*, <span class="built_in">NSString</span> *&gt;*willCheckDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历编辑器每一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx &lt; invocation.buffer.lines.count; idx++) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSString</span> *lineCode = invocation.buffer.lines[idx];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//若willCheckDict文件不为空，则进行是否使用了该头文件的判断</span></span><br><span class="line">    <span class="keyword">if</span> (willCheckDict.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        [willCheckDict enumerateKeysAndObjectsUsingBlock:^(<span class="built_in">NSNumber</span> * _Nonnull key, <span class="built_in">NSString</span> * _Nonnull checkString, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([lineCode containsString:checkString]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (![lineCode containsString:<span class="string">@"#import"</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ([headerDict[checkString] isEqualToNumber: @<span class="number">1</span>]) &#123;</span><br><span class="line">                        <span class="comment">//若使用了该头文件，则从willCheckDict字典中提出该项</span></span><br><span class="line">                        [willCheckDict removeObjectForKey:key];</span><br><span class="line">                        <span class="comment">//同时设置该头文件已经检查过，若后续仍出现该头文件，则可以进行删除</span></span><br><span class="line">                        headerDict[checkString] = @<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检测代码是否含有#import为头文件标志；+号我们认为是类扩展的标志</span></span><br><span class="line">    <span class="keyword">if</span> ([lineCode containsString:<span class="string">@"#import"</span>] &amp;&amp; ![lineCode containsString:<span class="string">@"+"</span>]) &#123;</span><br><span class="line">        <span class="comment">//解析获取类名</span></span><br><span class="line">        <span class="built_in">NSRange</span> range1 = [lineCode rangeOfString:<span class="string">@"\""</span>];</span><br><span class="line">        <span class="built_in">NSRange</span> range2 = [lineCode rangeOfString:<span class="string">@"\""</span> options:<span class="built_in">NSBackwardsSearch</span>];</span><br><span class="line">        <span class="built_in">NSRange</span> zeroRange = <span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">NSEqualRanges</span>(range1, zeroRange) || <span class="built_in">NSEqualRanges</span>(range2, zeroRange))) &#123;</span><br><span class="line">            <span class="built_in">NSRange</span> findRange = <span class="built_in">NSMakeRange</span>(range1.location + <span class="number">1</span>, range2.location - range1.location - <span class="number">3</span>);</span><br><span class="line">            <span class="built_in">NSString</span> *classString = [lineCode substringWithRange:findRange];</span><br><span class="line">            willCheckDict[@(idx)] = classString;</span><br><span class="line">            headerDict[classString] = @<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//取出需要删除的行</span></span><br><span class="line"><span class="built_in">NSMutableIndexSet</span> *index = [<span class="built_in">NSMutableIndexSet</span> indexSet];</span><br><span class="line">[willCheckDict.allKeys enumerateObjectsUsingBlock:^(<span class="built_in">NSNumber</span> * _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">    [index addIndex:obj.integerValue];</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除不符合条件的行</span></span><br><span class="line">[invocation.buffer.lines removeObjectsAtIndexes:index];</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知系统完成</span></span><br><span class="line">completionHandler(<span class="literal">nil</span>);</span><br></pre></td></tr></table></figure><h5 id="三、测试结果"><a href="#三、测试结果" class="headerlink" title="三、测试结果"></a>三、测试结果</h5><p>1.运行，选择Xcode8</p><p><img src="../assets/基于Xcode8插件开发～一键检测处理头文件引用/1240-20201011152256571.png" alt="command+r运行插件"></p><p>2.可以看见灰色的Xcode实例。随便选择一个项目打开</p><p><img src="../assets/基于Xcode8插件开发～一键检测处理头文件引用/1240-20201011152300605.png" alt="测试的Xcode，用于区别正式的Xcode"></p><p>3.测试。测试文件中含有未使用的头文件和冗余的头文件</p><p><img src="../assets/基于Xcode8插件开发～一键检测处理头文件引用/1240-20201011152304465.png" alt="处理前代码"></p><p>4.Editor中选择插件运行</p><p><img src="../assets/基于Xcode8插件开发～一键检测处理头文件引用/1240-20201011152307880.png" alt="不出意外Editor菜单最底下一栏，此处名字可以在info.plist修改"></p><p>5.检验运行结果</p><p><img src="../assets/基于Xcode8插件开发～一键检测处理头文件引用/1240-20201011152310859.png" alt="处理后代码"></p><p>啦啦啦，多余的头文件已经被成功检测到并且移除了了～</p><h5 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h5><p>至此，我们完成并测试通过了一个简单的Xcode插件的编写。主要目的是简单了解和使用Xcode8的插件，如果觉得有用，可以找到product里边的文件复制出来打开，然后在系统设置辅助功能中启用，最后在Xcode中绑定快捷键即可食用。当然，功能十分简陋，还请大神勿怪～</p><p>不足：受限于系统现有API，运行插件时，只能获取到当前编辑的文件，无法获取整个项目文件来分析，故很多功能暂时无法实现，如支持更加智能的检测等等，以后系统若能提供项目空间的文件访问和GUI支持，则插件可以发挥更大作用～</p><p><a href="https://github.com/yate1996/XcodeAutoImportExtension" target="_blank" rel="noopener">github地址：https://github.com/yate1996/XcodeAutoImportExtension</a></p><p>知识链：<br><a href="https://developer.apple.com/videos/play/wwdc2016/414/" target="_blank" rel="noopener">WWDC2016</a><br><a href="http://www.cocoachina.com/ios/20161212/18344.html" target="_blank" rel="noopener">iOS 10 Day By Day: Xcode Source Editor Extensions</a><br><a href="http://blog.csdn.net/zhouzhoujianquan/article/details/52600763" target="_blank" rel="noopener">使用 Xcode Source Editor Extension开发Xcode 8 插件</a></p><p>欢迎加群讨论其它～：578874451</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文基于Xcode8开放的Xcode Source Editor Extension，实现了一个自动删除源码中重复头文件的小插件。&lt;/p&gt;
&lt;!-- excerpt --&gt;
&lt;blockquote&gt;
&lt;p&gt;Xcode8开放了新的一个Extension：Xcode Sourc
      
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/all-tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>基于Sonar的iOS代码质量检测系统</title>
    <link href="http://yoursite.com/posts/%E5%9F%BA%E4%BA%8ESonar%E7%9A%84iOS%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://yoursite.com/posts/基于Sonar的iOS代码质量检测系统.html</id>
    <published>2017-01-14T16:00:00.000Z</published>
    <updated>2020-10-11T07:22:37.154Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了利用Sonar工具，搭建一个实现对iOS项目进行代码质量检测的系统。</p><!-- excerpt --><p>先瞄一眼成果～</p><p><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152115962.png" alt=""></p><p><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152121150.png" alt=""></p><h6 id="1-JDK，DBMS（演示环境使用Mysql）"><a href="#1-JDK，DBMS（演示环境使用Mysql）" class="headerlink" title="1.JDK，DBMS（演示环境使用Mysql）"></a>1.JDK，DBMS（演示环境使用Mysql）</h6><h6 id="2-创建sonar数据库和用户"><a href="#2-创建sonar数据库和用户" class="headerlink" title="2.创建sonar数据库和用户"></a>2.创建sonar数据库和用户</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -pCREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">CREATE USER &apos;sonar&apos; IDENTIFIED BY &apos;sonar&apos;;</span><br><span class="line">GRANT ALL ON sonar.* TO &apos;sonar&apos;@&apos;%&apos; IDENTIFIED BY &apos;sonar&apos;;</span><br><span class="line">GRANT ALL ON sonar.* TO &apos;sonar&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;sonar&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h6 id="3-下载sonar-演示环境使用v6-1，下载后解压到"><a href="#3-下载sonar-演示环境使用v6-1，下载后解压到" class="headerlink" title="3.下载sonar 演示环境使用v6.1，下载后解压到"></a>3.<a href="https://www.sonarqube.org/downloads/" target="_blank" rel="noopener">下载sonar</a> 演示环境使用v6.1，下载后解压到</h6><pre><code>/usr/local/sonar/</code></pre><h6 id="4-安装sonar-runner"><a href="#4-安装sonar-runner" class="headerlink" title="4.安装sonar-runner"></a>4.安装sonar-runner</h6><p><a href="http://repo1.maven.org/maven2/org/codehaus/sonar/runner/sonar-runner-dist/2.4/sonar-runner-dist-2.4.zip" target="_blank" rel="noopener">下载sonar-runner</a>：演示环境使用v2.4，下载后解压到</p><pre><code>/usr/local/sonar-runner/</code></pre><p>完成后配置bin环境变量PATH～</p><h6 id="5-安装完成sonar、sonar-runner后进行数据配置"><a href="#5-安装完成sonar、sonar-runner后进行数据配置" class="headerlink" title="5.安装完成sonar、sonar-runner后进行数据配置"></a>5.安装完成sonar、sonar-runner后进行数据配置</h6><p>sonar配置：sonar.properties配置文件/usr/local/sonar/conf/sonar.properties<br>配置数据库登陆账号密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sonar.jdbc.username=sonar</span><br><span class="line">sonar.jdbc.password=sonar</span><br><span class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance</span><br></pre></td></tr></table></figure><p>sonar-runner配置：sonar-runner.properties配置文件/usr/local/sonar-runner/conf/sonar-runner.properties。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sonar.host.url=http://localhost:9000</span><br><span class="line">#----- MySQL</span><br><span class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">#----- Global database settings</span><br><span class="line">sonar.jdbc.username=sonar</span><br><span class="line">sonar.jdbc.password=sonar</span><br><span class="line">#----- Default source code encoding</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br><span class="line">#----- Security (when &apos;sonar.forceAuthentication&apos; is set to &apos;true&apos;)</span><br><span class="line">sonar.login=admin</span><br><span class="line">sonar.password=admin</span><br></pre></td></tr></table></figure><h6 id="5-1在-usr-local-sonar-bin-macosx-universal-64-下执行："><a href="#5-1在-usr-local-sonar-bin-macosx-universal-64-下执行：" class="headerlink" title="5.1在/usr/local/sonar/bin/macosx-universal-64/下执行："></a>5.1在/usr/local/sonar/bin/macosx-universal-64/下执行：</h6><pre><code>sudo ./sonar.sh start  启动sonar。在浏览器打开localhost:9000查看是否启动</code></pre><h6 id="6-sonar默认没有安装oc的插件，需要手动下载-sonar-objective-c-plugin-0-5-0-SNAPSHOT-jar-引用下载地址"><a href="#6-sonar默认没有安装oc的插件，需要手动下载-sonar-objective-c-plugin-0-5-0-SNAPSHOT-jar-引用下载地址" class="headerlink" title="6.sonar默认没有安装oc的插件，需要手动下载:sonar-objective-c-plugin-0.5.0-SNAPSHOT.jar 引用下载地址"></a>6.sonar默认没有安装oc的插件，需要手动下载:sonar-objective-c-plugin-0.5.0-SNAPSHOT.jar <a href="https://github.com/ChenTF/iOS-sonarShell/blob/master/sonar-objective-c-plugin-0.5.0-SNAPSHOT.jar" target="_blank" rel="noopener">引用下载地址</a></h6><p>放置在/usr/local/sonar/extensions/plugins/目录下。重启sonar会自动加载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./sonar.sh stop</span><br><span class="line">sudo ./sonar.sh start</span><br></pre></td></tr></table></figure></p><h6 id="7-使用Homebrew来安装xctool、oclint、gcovr。"><a href="#7-使用Homebrew来安装xctool、oclint、gcovr。" class="headerlink" title="7.使用Homebrew来安装xctool、oclint、gcovr。"></a>7.使用Homebrew来安装xctool、oclint、gcovr。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brew install xctool</span><br><span class="line">brew tap oclint/formulae</span><br><span class="line">brew install oclint</span><br><span class="line">brew install gcovr</span><br></pre></td></tr></table></figure><h6 id="8-在待测试项目与-xocdeproj同级目录下新建文本sonar-project-properties配置待测试项目信息。引用下载地址"><a href="#8-在待测试项目与-xocdeproj同级目录下新建文本sonar-project-properties配置待测试项目信息。引用下载地址" class="headerlink" title="8.在待测试项目与*.xocdeproj同级目录下新建文本sonar-project.properties配置待测试项目信息。引用下载地址"></a>8.在待测试项目与*.xocdeproj同级目录下新建文本sonar-project.properties配置待测试项目信息。<a href="https://github.com/ChenTF/iOS-sonarShell/blob/master/sonar-project.properties" target="_blank" rel="noopener">引用下载地址</a></h6><p>配置结构如下：<br><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152127002.png"></p><h6 id="9-在此工作目录下运行隔壁老王写的兼容xcode8的脚本：https-github-com-ChenTF-iOS-sonarShell-blob-master-run-sonar-V2-sh"><a href="#9-在此工作目录下运行隔壁老王写的兼容xcode8的脚本：https-github-com-ChenTF-iOS-sonarShell-blob-master-run-sonar-V2-sh" class="headerlink" title="9.在此工作目录下运行隔壁老王写的兼容xcode8的脚本：https://github.com/ChenTF/iOS-sonarShell/blob/master/run-sonar_V2.sh"></a>9.在此工作目录下运行隔壁老王写的兼容xcode8的脚本：<a href="https://github.com/ChenTF/iOS-sonarShell/blob/master/run-sonar_V2.sh" target="_blank" rel="noopener">https://github.com/ChenTF/iOS-sonarShell/blob/master/run-sonar_V2.sh</a></h6><p>PS：运行该脚本无效的可尝试参考11的思路手动运行</p><h6 id="10-完成。打开localhost-9000查看结果，然后开始修bug吧～～附图："><a href="#10-完成。打开localhost-9000查看结果，然后开始修bug吧～～附图：" class="headerlink" title="10.完成。打开localhost:9000查看结果，然后开始修bug吧～～附图："></a>10.完成。打开localhost:9000查看结果，然后开始修bug吧～～附图：</h6><p><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152129070.png" alt=""></p><h6 id="11-补充：手动执行代码质量检测过程"><a href="#11-补充：手动执行代码质量检测过程" class="headerlink" title="11.补充：手动执行代码质量检测过程"></a>11.补充：手动执行代码质量检测过程</h6><h6 id="11-1-生成compile-commands-json文件。命令："><a href="#11-1-生成compile-commands-json文件。命令：" class="headerlink" title="11.1.生成compile_commands.json文件。命令："></a>11.1.生成compile_commands.json文件。命令：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -workspace TRB.xcworkspace -scheme TRB -sdk iphonesimulator  build | tee xcodebuild.log | xcpretty -r json-compilation-database --output compile_commands.json</span><br></pre></td></tr></table></figure><p><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152142061.png" alt=""></p><p><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152144319.png" alt=""></p><h6 id="11-2生成oclint-xml。命令："><a href="#11-2生成oclint-xml。命令：" class="headerlink" title="11.2生成oclint.xml。命令："></a>11.2生成oclint.xml。命令：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oclint-json-compilation-database -- -max-priority-1 10000 -max-priority-2 10000 -max-priority-3 10000 -rc LONG_LINE=150 -report-type pmd -o oclint.xml</span><br></pre></td></tr></table></figure><p><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152147472.png" alt=""></p><h6 id="11-3执行sonar-runner。"><a href="#11-3执行sonar-runner。" class="headerlink" title="11.3执行sonar-runner。"></a>11.3执行sonar-runner。</h6><p>注意在sonar-project.properties配置文件中，需要配置oclint.xml文件路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar.objectivec.oclint.reportPath=oclint.xml</span><br></pre></td></tr></table></figure></p><p><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152152042.png" alt=""></p><p> 执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sonar-runner //若提示没找到命令的检查PATH的设置</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/459563-ee46c79fc784d4d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152154613.png" alt=""></p><h6 id="11-4完成。打开localhost-9000查看结果。～～"><a href="#11-4完成。打开localhost-9000查看结果。～～" class="headerlink" title="11.4完成。打开localhost:9000查看结果。～～"></a>11.4完成。打开localhost:9000查看结果。～～</h6><p><img src="../assets/基于Sonar的iOS代码质量检测系统/1240-20201011152156878.png" alt=""></p><blockquote><p>补充：<br>如果需要，可下载sonar中文插件，放到/usr/local/sonar/extensions/plugins/下，重启sonar即可。<br>注意下载的语言包需要和sonar版本号对应，例如演示环境sonar为v6.1，故下载v1.13语言包。<br><a href="https://github.com/SonarQubeCommunity/sonar-l10n-zh" target="_blank" rel="noopener">对应关系请参照下载地址</a></p></blockquote><p>参考链接：<br><a href="https://my.oschina.net/ChenTF/blog/806565" target="_blank" rel="noopener">Sonar XCode8兼容</a></p><p>欢迎加群讨论其它～：578874451</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文记录了利用Sonar工具，搭建一个实现对iOS项目进行代码质量检测的系统。&lt;/p&gt;
&lt;!-- excerpt --&gt;
&lt;p&gt;先瞄一眼成果～&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../assets/基于Sonar的iOS代码质量检测系统/1240-2020101115211
      
    
    </summary>
    
      <category term="ObjectiveC" scheme="http://yoursite.com/all-categories/ObjectiveC/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/all-tags/iOS/"/>
    
  </entry>
  
</feed>
